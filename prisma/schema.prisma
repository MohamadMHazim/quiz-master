// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  ownerId     String
  questions   Question[]
}

model Question {
  id          Int          @id @default(autoincrement())
  quizId      Int
  text        String
  type        QuestionType
  options     Option[]
  answer      Answer?
  userAnswers UserAnswer[] // Add this line to link back to UserAnswer

  quiz Quiz @relation(fields: [quizId], references: [id])
}

model Option {
  id         Int     @id @default(autoincrement())
  questionId Int
  text       String
  isCorrect  Boolean

  question Question @relation(fields: [questionId], references: [id])
}

model Answer {
  id         Int    @id @default(autoincrement())
  questionId Int    @unique
  text       String

  question Question @relation(fields: [questionId], references: [id])
}

model UserAnswer {
  tryid      Int
  id         Int      @id @default(autoincrement())
  userId     String
  quizId     Int
  questionId Int
  answer     String
  grade      Boolean
  question   Question @relation(fields: [questionId], references: [id])
}

enum QuestionType {
  MCQ
  FILL_IN_THE_BLANKS
  WRITTEN_ANSWER
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
